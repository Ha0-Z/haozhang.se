It sounds like you're building an exciting project! Let’s break down the issues you're facing step by step and explore your options for making your website dynamic or static. I'll also help you figure out a solution for your specific requirements while keeping it simple and maintainable.
1. Static vs. Dynamic Website

You’ve already created a simple static HTML page, but now you're thinking about the best approach for your blog. Let’s compare static and dynamic approaches to help you decide.
Static Website:

A static site typically has content that doesn't change frequently or requires real-time interaction with a database. Static sites are fast, easy to deploy, and require fewer server resources. However, they are not ideal if you have frequent content updates or want dynamic features like displaying blog posts from a database in real-time.

    Advantages:
        Speed and performance (since it's just serving static HTML, CSS, and JS).
        Easy to scale and deploy.
        Simple to manage with little server-side complexity.

    Disadvantages:
        Updating content manually (you have to regenerate or manually update the page each time).
        Doesn’t handle dynamic content like fetching blog posts automatically from a database.

Dynamic Website:

A dynamic site, on the other hand, is built to handle real-time data, such as showing blog posts fetched from a database like PostgreSQL. A dynamic website can be powered by various backend technologies such as Node.js, Python, etc., and integrated with your database for automatic updates.

    Advantages:
        Can fetch and display data from a database, like your blog posts, in real-time.
        Easy to automate the process of adding new blog posts (just add them to the database, and they’ll show up on the website).
    Disadvantages:
        Requires more setup (server-side language, frameworks).
        Potentially more complex, especially if you want to avoid using PHP.

2. Static Site with Database Updates

Since you want to use PostgreSQL to store blog posts, and you're concerned with updates, a purely static website can still work, but it will require some automation or periodic updates to reflect the new data from the database. Here’s how you could handle it:

    Manual Static Site Updates: You could manually update the HTML whenever there’s a new post, but this could get tedious. You might want to automate this process so that every time a new row is added to the database, your HTML is updated with the new blog post.

    Static Site Generators (SSG): A more efficient solution for generating static content from a database is to use a Static Site Generator like Jekyll or Hugo. These tools can take your database or markdown files and generate static HTML files that can be served by Nginx.
        Workflow:
            Add a new blog post to the PostgreSQL database.
            Run a script (perhaps using Python or Node.js) to fetch the new post data and convert it into a format that can be used by the static site generator.
            Regenerate the static HTML files and deploy them to your server.
            Serve the updated HTML via Nginx.

    This method combines the speed of a static site with the ability to easily update your content by automating the process of converting the database entries into static pages.

3. Dynamic Site Without PHP on Nginx

Since you don't want to use PHP and you’re working with Nginx, you can still create a dynamic site using other backend technologies like Node.js or Python (Flask/Django). These are popular and modern alternatives that allow you to build dynamic websites without PHP.
Option 1: Node.js (with Express)

Node.js with the Express framework is a great option for handling dynamic content. Here's how you could set it up:

    Install Node.js: Make sure Node.js is installed on your server. If not, install it using the package manager of your OS.

sudo apt update
sudo apt install nodejs npm

Create a Node.js Application: Set up a simple Express server to handle your requests and fetch data from PostgreSQL.

    Install dependencies:

npm init -y
npm install express pg

Create server.js:

    const express = require('express');
    const { Pool } = require('pg');
    const app = express();
    const port = 3000;

    // Set up PostgreSQL connection
    const pool = new Pool({
      user: 'your_username',
      host: 'localhost',
      database: 'your_database',
      password: 'your_password',
      port: 5432,
    });

    // Serve static files from Nginx
    app.use(express.static('public'));

    // Route to display blog posts
    app.get('/blog', async (req, res) => {
      try {
        const result = await pool.query('SELECT * FROM blog_posts ORDER BY date DESC');
        res.json(result.rows);  // Return posts as JSON (or render in HTML if needed)
      } catch (err) {
        console.error(err);
        res.status(500).send('Server Error');
      }
    });

    app.listen(port, () => {
      console.log(`Server running at http://localhost:${port}`);
    });

This will fetch blog posts from PostgreSQL and serve them through an Express route.

Configure Nginx to Proxy Requests: Configure Nginx to proxy requests to your Node.js server.

Open the Nginx configuration file (/etc/nginx/sites-available/default or /etc/nginx/nginx.conf), and add the following:

server {
  listen 80;
  server_name your-domain.com;

  location / {
    proxy_pass http://localhost:3000;
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection 'upgrade';
    proxy_set_header Host $host;
    proxy_cache_bypass $http_upgrade;
  }
}

Running the Server: Run the Node.js server:

    node server.js

    Dynamic Content Rendering: You can use a templating engine (like EJS) to render HTML dynamically on the server side, combining the data from PostgreSQL and your HTML templates.

Option 2: Python with Flask

If you prefer Python, Flask is a great minimal framework. You can follow a similar structure to Node.js, but using Python instead. Install Flask and psycopg2:

pip install Flask psycopg2

Then, set up a basic Flask app to fetch data from PostgreSQL and render it on your blog page.

from flask import Flask, render_template
import psycopg2

app = Flask(__name__)

def get_db_connection():
    conn = psycopg2.connect(dbname='your_database', user='your_username', password='your_password', host='localhost')
    return conn

@app.route('/blog')
def blog():
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM blog_posts ORDER BY date DESC')
    posts = cursor.fetchall()
    conn.close()
    return render_template('blog.html', posts=posts)

if __name__ == '__main__':
    app.run(debug=True)

Then you can configure Nginx as a reverse proxy to forward requests to your Flask application, similarly to the Node.js example.
4. Summary and Recommendations

    Static Site: If you don’t mind regenerating static pages periodically, a static site generator like Jekyll or Hugo can help you automate updates without needing a full dynamic setup.
    Dynamic Site: If you need to display blog posts in real-time or want to avoid manually updating content, go with a dynamic site powered by a backend like Node.js (Express) or Python (Flask). Both of these are lightweight and can run on Nginx without PHP.

If you prefer simplicity and don’t want to manage a full dynamic backend, using a static site generator might be the way to go. But for a more interactive, real-time experience, building a dynamic site with Node.js or Flask would be the better approach.

Let me know if you'd like further details or help setting up either approach!